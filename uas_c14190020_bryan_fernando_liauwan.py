# -*- coding: utf-8 -*-
"""UAS_C14190020_Bryan Fernando Liauwan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eR0nP-LKOMr4Lbzsi4_DtiEKDMEOVv_w
"""

#Read Data
import pandas as pd

data_train = pd.read_excel('https://imelda.petra.ac.id/public/dataset.xlsx', 'Klasifikasi.4D')
#print(data_train)

data_test = pd.read_excel('https://imelda.petra.ac.id/public/dataset_test.xlsx', 'Klasifikasi.4D.test')
#print(data_test)

#Check Info & Describe Data
#print("\nData Train Info: \n")
#print(data_train.info())
#print("\nData Train Describe: \n")
#print(data_train.describe())

#print("\nData Test Info: \n")
#print(data_test.info())
#print("\nData Test Describe: \n")
#print(data_test.describe())

#Because Max of Kuis & UTS is not 100 in data_train, append data to manipulate

df = pd.Series({"No.ID":100,"Tugas":100,"Kuis":100,"UTS":100,"UAS":100}, name=19)
data_test = data_test.append(df)
#print(data_test)
#data_test.describe()

#Split Data
X_train_all = data_train.drop(['No.ID', 'NH'], axis=1)
y_train_all = data_train['NH']

X_test_all = data_test.drop(['No.ID'], axis=1)

nama_kolom = X_test_all.columns

#Nomalization MinMax For X_train
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
scaler = scaler.fit_transform(X_train_all)

X_train_all = pd.DataFrame(scaler)
X_train_all.columns = nama_kolom
#X_train_all.head()

#Nomalization MinMax For X_test
scaler = MinMaxScaler()
scaler = scaler.fit_transform(X_test_all)

X_test_all = pd.DataFrame(scaler)
X_test_all.columns = nama_kolom

#Drop Last Row (Manipulation Row)
X_test_all = X_test_all[:19]
#print(X_test_all)

#Run Data Train for Accuracy
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_train_all, y_train_all, test_size = 0.2, random_state = 0)

from sklearn import svm
clf = svm.SVC()
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
#for i in y_pred:
#  print(i)

#Check Accuracy
from sklearn.metrics import classification_report, confusion_matrix
#print("\nReporting : \n",classification_report(y_pred, y_test))
#print("\nConfusion Matrix: \n",confusion_matrix(y_pred, y_test))

from sklearn import svm

X_train = X_train_all
y_train = y_train_all
X_test = X_test_all

clf = svm.SVC()
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
for i in y_pred:
  print(i)